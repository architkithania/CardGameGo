package main

import "C"

import (
	"CardGameGo/src/asset-managers/fontmanager"
	"fmt"
	"github.com/veandco/go-sdl2/img"
	"github.com/veandco/go-sdl2/mix"
	"github.com/veandco/go-sdl2/sdl"
	"github.com/veandco/go-sdl2/ttf"
	"runtime"
)

const (
	winTitle  = "Just-a-Deck"
	winWidth  = 480
	winHeight = 800
)

// Engine represents SDL engine.
type Engine struct {
	Window   *sdl.Window
	Fonts 	 *fontmanager.FontManager
	Renderer *sdl.Renderer
	running  bool
}

// Returns a new SDL2 engine
func NewEngine() *Engine {
	e := &Engine{}
	e.running = true
	return e
}

// Init initializes SDL.
func (e *Engine) Init() (err error) {
	err = sdl.Init(sdl.INIT_EVERYTHING)
	if err != nil {
		return
	}

	img.Init(img.INIT_PNG)

	e.Fonts, err = fontmanager.NewFontManager()
	if err != nil {
		return
	}

	//err = mix.Init(mix.INIT_MP3)
	//if err != nil {
	//	return
	//}

	//err = mix.OpenAudio(mix.DEFAULT_FREQUENCY, mix.DEFAULT_FORMAT, mix.DEFAULT_CHANNELS, 3072)
	//if err != nil {
	//	return
	//}

	e.Window, err = sdl.CreateWindow(winTitle, sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED, winWidth, winHeight, sdl.WINDOW_SHOWN)
	if err != nil {
		return
	}

	e.Renderer, err = sdl.CreateRenderer(e.Window, -1, sdl.RENDERER_ACCELERATED)
	if err != nil {
		return
	}

	return
}


// Loads the required resources through the asset managers
func (e *Engine) Load() (err error) {
	err = e.Fonts.Load()
	if err != nil {
		return
	}

	return
}

// Destroy destroys SDL and releases the memory.
func (e *Engine) Destroy() {
	_ = e.Renderer.Destroy()
	_ = e.Window.Destroy()
	mix.CloseAudio()

	img.Quit()
	mix.Quit()
	ttf.Quit()
	sdl.Quit()
}

// Running checks if loop is running.
func (e *Engine) Running() bool {
	return e.running
}

// Quit exits main loop.
func (e *Engine) Quit() {
	e.running = false
}

func SdlMain() {
	runtime.LockOSThread()
	e := NewEngine()

	err := e.Init()
	if err != nil {
		sdl.LogError(sdl.LOG_CATEGORY_APPLICATION, "InitError: %s\n", err)
	}
	defer e.Destroy()

	err = e.Load()
	if err != nil {
		sdl.LogError(sdl.LOG_CATEGORY_APPLICATION, "LoadError: %s\n", err)
	}

	for e.Running() {
		for event := sdl.PollEvent(); event != nil; event = sdl.PollEvent() {
			switch event.(type) {
			case *sdl.QuitEvent:
				e.Quit()
			}
		}

		//textTexture, err := e.renderText("Hello World", "universalfruitcake")
		//_, _, tW, tH, _ := textTexture.Query()

		if err != nil {
			fmt.Println(err)
			e.Quit()
		}

		_ = e.Renderer.Clear()
		//_ = e.Renderer.SetDrawColor(168, 235, 254, 255)
		e.Renderer.FillRect(nil)
		//e.Renderer.Copy(textTexture, nil, &sdl.Rect{400/2, 800/2, tW, tH})

		e.Renderer.Present()
		sdl.Delay(50)
	}
}

func (e *Engine)renderText(text string, font string) (*sdl.Texture, error) {
	surface, err := e.Fonts.Fonts[font].RenderUTF8Solid(text, sdl.Color{})
	if err != nil {
		return nil, err
	}
	defer surface.Free()

	texture, err := e.Renderer.CreateTextureFromSurface(surface)
	if err != nil {
		return nil, err
	}
	return texture, nil
}

func main() {
	SdlMain()
}
